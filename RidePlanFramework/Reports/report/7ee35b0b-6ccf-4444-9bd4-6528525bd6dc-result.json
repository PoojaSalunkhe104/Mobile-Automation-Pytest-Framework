{"name": "test_VerifycontinuePages", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: No alert is present on the screen\nStacktrace:\nio.appium.uiautomator2.common.exceptions.NoAlertOpenException: No alert is present on the screen\n\tat io.appium.uiautomator2.utils.AlertHelpers.getAlertType(AlertHelpers.java:75)\n\tat io.appium.uiautomator2.utils.AlertHelpers.getText(AlertHelpers.java:187)\n\tat io.appium.uiautomator2.handler.GetAlertText.safeHandle(GetAlertText.java:31)\n\tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:266)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:260)\n\tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:68)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n\tat java.lang.Thread.run(Thread.java:920)", "trace": "self = <test_VerifyOnboardingPages.Test_001_VerifyStartingPages object at 0x107f38ac0>\nsetup = <appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>, os = 'android'\n\n        @allure.step\n        def test_VerifycontinuePages(self, setup, os):\n    \n            self.logger.info(\"**** Test case ID 001 VerifyStartingPages Testcase started****\")\n            print(\"**** Test case ID 001 VerifyStartingPages Testcase started****\")\n    \n            #Create object for classes\n            self.driver = setup\n            self.Excel = ReadExcelFile()\n    \n            if os == \"iOS\":\n                self.Hithere = iOS_HiThere_ContinuePages()\n                self.commonMethod = iOS_CommonMethods()\n                print(\"Testcase Run on iOS\")\n    \n            elif os == \"android\":\n                self.Hithere = HiThere_ContinuePages()\n                self.commonMethod = CommonMethods()\n                print(\"Testcase Run on android\")\n    \n    \n            #Reading excelSheet\n            Address, Name = self.Excel.readExcelData(self.driver,TestCaseName)\n    \n            #Verify Hi There! Text\n            time.sleep(10)\n            Actual_Result = self.Hithere.GetText_HiThere(self.driver)\n            Expected_Result = \"Hi there!\"\n            self.commonMethod.TryExpectBlockfor_TextMatch(self.driver, Actual_Result, Expected_Result)\n    \n            #verify Bike ride element is displayed\n            Element = self.Hithere.IsDisplayed_BikeRideText(self.driver)\n            Message = \"Verify Bike ride Text \"\n            self.commonMethod.TryExpectBlockfor_Isdisplayed(self.driver, Element, Message)\n    \n          #Click on continue button\n            self.Hithere.clickOnContinueBtn(self.driver)\n            self.Hithere.clickOnContinueBtn(self.driver)\n            self.Hithere.clickOnContinueBtn(self.driver)\n            self.Hithere.clickOnContinueBtn(self.driver)\n    \n            if os == \"iOS\":\n              self.Hithere.ClickOnDontAllow(self.driver)\n    \n    #1st alert\n            elif os == \"android\":\n              try:\n                time.sleep(10);\n                alert = self.driver.switch_to.alert\n                alert.accept()\n                self.logger.info(\"1st alert accepted\")\n                print(\"1st alert accepted\")\n              except TimeoutException:\n               self.logger.info(\"no alert\")\n               print(\"no alert\")\n    \n    #2nd alert\n              try:\n                time.sleep(10);\n>               alert = self.driver.switch_to.alert\n\nTestCases/test_VerifyOnboardingPages.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/switch_to.py:56: in alert\n    _ = alert.text\nvenv/lib/python3.10/site-packages/selenium/webdriver/common/alert.py:66: in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\nvenv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:30: in check_response\n    raise wde\nvenv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x107f396c0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such alert\",\"message\":\"No alert is present on the screen\",\"stacktrace\"...ctory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\\\\n\\\\tat java.lang.Thread.run(Thread.java:920)\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoAlertPresentException: Message: No alert is present on the screen\nE       Stacktrace:\nE       io.appium.uiautomator2.common.exceptions.NoAlertOpenException: No alert is present on the screen\nE       \tat io.appium.uiautomator2.utils.AlertHelpers.getAlertType(AlertHelpers.java:75)\nE       \tat io.appium.uiautomator2.utils.AlertHelpers.getText(AlertHelpers.java:187)\nE       \tat io.appium.uiautomator2.handler.GetAlertText.safeHandle(GetAlertText.java:31)\nE       \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:266)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:260)\nE       \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:68)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE       \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE       \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE       \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE       \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE       \tat java.lang.Thread.run(Thread.java:920)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoAlertPresentException"}, "steps": [{"name": "test_VerifycontinuePages", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: No alert is present on the screen\nStacktrace:\nio.appium.uiautomator2.common.exceptions.NoAlertOpenException: No alert is present on the screen\n\tat io.appium.uiautomator2.utils.AlertHelpers.getAlertType(AlertHelpers.java:75)\n\tat io.appium.uiautomator2.utils.AlertHelpers.getText(AlertHelpers.java:187)\n\tat io.appium.uiautomator2.handler.GetAlertText.safeHandle(GetAlertText.java:31)\n\tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:266)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:260)\n\tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:68)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n\tat java.lang.Thread.run(Thread.java:920)\n\n", "trace": "  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/TestCases/test_VerifyOnboardingPages.py\", line 80, in test_VerifycontinuePages\n    alert = self.driver.switch_to.alert\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/selenium/webdriver/remote/switch_to.py\", line 56, in alert\n    _ = alert.text\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/selenium/webdriver/common/alert.py\", line 66, in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 435, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py\", line 30, in check_response\n    raise wde\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"/Users/macbook/PycharmProjects/RidePlanFramework/venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "GetText_HiThere", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}], "start": 1661748602485, "stop": 1661748602727}, {"name": "TryExpectBlockfor_TextMatch", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}, {"name": "Actual_Result", "value": "'Hi there!'"}, {"name": "Expected_Result", "value": "'Hi there!'"}], "start": 1661748602727, "stop": 1661748602727}, {"name": "IsDisplayed_BikeRideText", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}], "start": 1661748602728, "stop": 1661748602795}, {"name": "TryExpectBlockfor_Isdisplayed", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}, {"name": "Element", "value": "True"}, {"name": "Message", "value": "'Verify Bike ride Text '"}], "start": 1661748602796, "stop": 1661748602796}, {"name": "clickOnContinueBtn", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}], "start": 1661748602796, "stop": 1661748602922}, {"name": "clickOnContinueBtn", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}], "start": 1661748602922, "stop": 1661748604910}, {"name": "clickOnContinueBtn", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}], "start": 1661748604910, "stop": 1661748606889}, {"name": "clickOnContinueBtn", "status": "passed", "parameters": [{"name": "driver", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}], "start": 1661748606889, "stop": 1661748607742}], "parameters": [{"name": "setup", "value": "<appium.webdriver.webdriver.WebDriver (session=\"0b71cf64-597b-4c08-9976-7d36d450f0df\")>"}, {"name": "os", "value": "'android'"}], "start": 1661748592454, "stop": 1661748628072}], "attachments": [{"name": "log", "source": "c50b0fe0-0cac-4f1e-a232-00880f0295f3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5647feaa-ca6c-4b17-ba9f-4f4eb382eb12-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "73dd2b7c-cdcd-4103-a58b-f62c6f9f88ef-attachment.txt", "type": "text/plain"}], "start": 1661748592454, "stop": 1661748628078, "uuid": "aeedc88f-253d-4993-9727-3fc630710371", "historyId": "1bcce9a7585e171c3aebaed63aeeb732", "testCaseId": "28b743ae14705f1ea5d98ed8925588e9", "fullName": "test_VerifyOnboardingPages.Test_001_VerifyStartingPages#test_VerifycontinuePages", "labels": [{"name": "suite", "value": "test_VerifyOnboardingPages"}, {"name": "subSuite", "value": "Test_001_VerifyStartingPages"}, {"name": "host", "value": "Macbooks-MacBook-Pro.local"}, {"name": "thread", "value": "1418-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_VerifyOnboardingPages"}]}